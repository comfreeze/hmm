#!/bin/bash
VERSION=0.1.0
VERBOSE=false
RETURN_HOLDER=
FORCE=false
SELF_PATH=$(cd -P -- "$(dirname -- "$0")" && pwd -P) && SELF_PATH=$SELF_PATH/$(basename -- "$0")

while [ -h $SELF_PATH ]; do
    DIR=$(dirname -- "$SELF_PATH")
    SYM=$(readlink $SELF_PATH)
    SELF_PATH=$(cd $DIR && cd $(dirname -- "$SYM") && pwd)/$(basename -- "$SYM")
done

#
# Colorful ASCII sig - Just cause bubb
#
signature() {
	echo "$(tput bold)$(tput setaf 4)-[$(tput setaf 6)CFZ$(tput setaf 4)]- $(tput setaf 1)H$(tput sgr0)eadworks $(tput setaf 1)M$(tput sgr0)achination $(tput setaf 1)M$(tput sgr0)anagement$(tput sgr0) - v$VERSION"
}
#
# Help and usage (early to show for errors)
#
usage() {
    cat << EOF
hmm - helper with docker container tooling

hmm [feature] [params] action [options]

 FEATURES:
   -a, --actions       Show complete list of available actions
   -h, --help          Show brief help
   -i, --info          Show defined contants

 PARAMS:
   --control           (nsenter|ssh) Select which access to use in helper calls.
   -e NAME=value       Define an internal environment variable
   -p (###:)###        Tunnel a port through the container [host:container]
   -v (/path:)/path    Mount a virtual volume into the container [host:container]
   --verbose           Enable debug messaging
   --force             Manually force an operation, if allowed
   --path              Display HMM home path
   -c (filename) Direct configuration file specification (default: config.hmm)
EOF
}
#
# Verbosity helper
#
verbose() {
    if [[ $VERBOSE = true ]]; then
        echo $1
    fi
}
#
# Test configuration
#
check() {
    if [[ $CONTAINER_NAME = "-" ]]; then
        echo "ERROR: Invalid configuration!"
        usage
        exit 1
    fi
}
#
# Test empty parameters
#
not_empty() {
    [[ ! $1 = "" ]] || echo $2 && exit 1
}
#
# PID Lookup
#
container_pid() {
    RESULT=$( $DOCKER_CMD inspect --format {{.State.Pid}} $CONTAINER_NAME )
    RETURN_HOLDER=$RESULT
    return
}
#
# PORT Lookup
#
container_port() {
    RESULT=$( $DOCKER_CMD port $CONTAINER_NAME $1 | cut -d : -f 2 )
    RETURN_HOLDER=$RESULT
    return
}
#
# Image Lookup
#
container_image() {
    RESULT=$( $DOCKER_CMD inspect -f {{.Image}} $CONTAINER_NAME | cut -d : -f 2 )
    RETURN_HOLDER=$RESULT
    return
}
#
# Actions List
#
get_actions() {
    RESULT=""
    cd $SCRIPTS/
    for ACTION_FILE in *
    do
        [[ $RESULT = "" ]] || RESULT+=","
        RESULT+="${ACTION_FILE/$SCRIPTS\//}"
    done
    cd $CURDIR
    RETURN_HOLDER=$RESULT
    return
}
#
# Installation helper - verify replace
verify_install_replace() {
    TARGET=$1
    CLEAN=$2
    INSTALL=$3
    CONFIRM=$4
    if [[ -a "$TARGET" ]]; then
        if [[ $FORCE = true ]]; then
            $CLEAN
            $INSTALL
        else
            read -n 1 -p "$TARGET exists, clean it first (y/n)? "
            echo " "
            if [[ "$REPLY" == "y" ]]; then
                $CLEAN
                $INSTALL
            else
                echo "Skipping $TARGET"
            fi
        fi
    else
        $INSTALL
    fi
}
#
# Export functions to children
#
export -f signature
export -f usage
export -f verbose
export -f check
export -f not_empty
export -f container_pid
export -f container_port
export -f container_image
export -f get_actions
export -f verify_install_replace

#
# Command references
# Alias new versions hack
#
if [ -f "/usr/bin/docker.io" ]; then
 DOCKER_CMD="docker.io"
else
 DOCKER_CMD="docker"
fi
export GIT_CMD="git"
export DOCKER_CMD

#
# Directory specifications:
# Always operates on current directory
#
HMM_DIR=$( dirname -- "$SELF_PATH" )
export HMM_TARGET_DIR=$( pwd )
export CURDIR=$HMM_TARGET_DIR/
export HMM_CONFIG=${CURDIR}config.hmm
export HMM_LOCAL_CONFIG=${CURDIR}local.hmm
export HMM_CONTROL="nsenter"
export SCRIPTS="${HMM_DIR}/.hmm"
export FORCE
export HMM_DIR
export RETURN_HOLDER
export VERBOSE

#
# Parameters
#
while test $# -gt 0; do
	case "$1" in
		-p)
			shift
			if test $# -gt 0; then
				verbose "Setting $1"
				ADD_PORTS="${ADD_PORTS} -p $1"
			else
				verbose "ERROR No port specified"
				usage
				exit 1
			fi
			shift
			;;
		--port*)
			DATA=`echo $1 | sed -e 's/^[^=]*=//g'`
			ADD_PORTS="$ADD_PORTS -p $DATA"
			shift
			;;
		-v)
			shift
			if test $# -gt 0; then
				verbose "Setting $1"
				ADD_VOLUMES="${ADD_VOLUMES} -v $1"
			else
				verbose "ERROR: No port specified"
				usage
				exit 1
			fi
			shift
			;;
		--vol*)
			DATA=`echo $1 | sed -e 's/^[^=]*=//g'`
			ADD_VOLUMES="$ADD_VOLUMES -v $DATA"
			shift
			;;
		-e)
			shift
			if test $# -gt 0; then
				verbose "Setting $1"
				ADD_ENV_VARS="${ADD_ENV_VARS} -e $1"
			else
				verbose "ERROR: No var specified"
				usage
				exit 1
			fi
			shift
			;;
		--env*)
			DATA=`echo $1 | sed -e 's/^[^=]*=//g'`
			ADD_ENV_VARS="$ADD_ENV_VARS -e $DATA"
			shift
			;;
	    --force)
	        FORCE=true
	        shift
	        ;;
	    --verbose)
	        VERBOSE=true
	        shift
	        ;;
	    --path)
	        echo "$HMM_DIR"
	        exit
	        ;;
		-h)
			shift
			HMM_DIR=$1
			verbose "Using home: $HMM_DIR"
			shift
			;;
		-c)
			shift
			HMM_CONFIG=$1
			verbose "Using config: $HMM_CONFIG"
			shift
			;;
		--control)
			shift
			HMM_CONTROL=$1
			verbose "Using control: $HMM_CONTROL"
			shift
			;;
		*)
			break
			;;
	esac
done

verbose "HMM_DIR=$HMM_DIR"
verbose "SCRIPTS=$SCRIPTS"
verbose "Using $HMM_DIR/.hmm as root for HMM scripts..."

#
# Includes
#
if [ -f "$HMM_LOCAL_CONFIG" ]; then
	verbose "Using local config $HMM_LOCAL_CONFIG"
	source "$HMM_LOCAL_CONFIG"
else 
	if [ -f "$HMM_CONFIG" ]; then
		verbose "Using config $HMM_CONFIG..."
		source "$HMM_CONFIG"
	fi
fi

PORTS="$PORTS $ADD_PORTS"
VOLUMES="$VOLUMES $ADD_VOLUMES"
ENV_VARS="$ENV_VARS $ADD_ENV_VARS"

#
# Fully qualified name:
# e.g. hostname.domain:port/repository:tag
#
export DOCKER_NAME=$([ "$REGISTRY" == "" ] && echo "" || echo "$REGISTRY/" )${BASE}$([ "$TAG" == "" ] && echo "" || echo ":$TAG" )

#
# Friendly name:
# e.g. my-cool-server-3.0
#
CONTAINER_NAME="$BASE"
if [[ ! $TAG = "" ]]; then
    CONTAINER_NAME="$CONTAINER_NAME-$TAG"
fi
if [[ $CONTAINER_USER = "" ]]; then
    CONTAINER_USER="$USER"
fi
export CONTAINER_NAME

#
# Compiled launch parameters:
# e.g. -p 80:80 -v /var/www -e APP_ENV=prod
#
export CONTAINER_ARGS="$ENV_VARS $PORTS $VOLUMES"
export CONTAINER_SSH="$SSH_PORT"
export CONTAINER_USER
export FORCE

#
# CLI User Interface
#
while test $# -gt 0; do
	case "$1" in
		-h|--help)
			signature
			usage
			exit 0
			;;
		-i|--info)
			signature
			echo "SELF_PATH:      $SELF_PATH"
			echo "HMM_DIR:        $HMM_DIR"
			echo "HMM_CONFIG:     $HMM_CONFIG"
			echo "PARENT:         $PARENT"
			echo "REGISTRY:       $REGISTRY"
			echo "BASE:           $BASE"
			echo "TAG:            $TAG"
			echo "DOCKER_NAME:    $DOCKER_NAME"
			echo "CONTAINER_USER: $CONTAINER_USER"
			echo "CONTAINER_NAME: $CONTAINER_NAME"
			echo "CONTAINER_ARGS: $CONTAINER_ARGS"
			exit 0
			;;
		-a|--actions)
			signature
			cd $SCRIPTS/
			echo "Available actions:"
			for ACTION_FILE in *
			do
				echo " * ${ACTION_FILE/$SCRIPTS\//}"
			done
			cd $CURDIR
			exit 0
			;;
        *)
			if [[ -f "$SCRIPTS/$1" ]]; then
				ACTION="$SCRIPTS/$1"
				verbose "ACTION: $ACTION"
				shift
			fi
            break
            ;;
	esac
done

if [ "$ACTION" != "" ]; then
	/bin/bash "$ACTION" $*
#	exit 0
else
	usage
	exit 0
fi

# echo $CONTAINER_ARGS
