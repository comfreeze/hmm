#!/bin/bash
VERSION=0.1.0

#
# Colorful ASCII sig - Just cause bubb
#
signature() {
	echo "$(tput bold)$(tput setaf 4)-[$(tput setaf 6)CFZ$(tput setaf 4)]- $(tput setaf 1)Z$(tput sgr0)ero $(tput setaf 1)E$(tput sgr0)nergy $(tput setaf 1)D$(tput sgr0)ocker$(tput sgr0) - v$VERSION"
}
#
# Help and usage (early to show for errors)
#
usage() {
	echo "zed - helper with docker container tooling"
	echo " "
	echo "zed [feature] [params] action [options]"
	echo " "
	echo " FEATURES: "
	echo "   -a, --actions       Show complete list of available actions"
	echo "   -h, --help          Show brief help"
	echo "   -i, --info          Show defined contants"
	echo " "
	echo " PARAMS: "
	echo "   -c (nsenter|ssh)    Select which control scheme to use in helper calls to the system."
	echo "   -e NAME=value       Define an internal environment variable"
	echo "   -p (###:)###        Tunnel a port through the container [host:container]"
	echo "   -v (/path:)/path    Mount a virtual volume into the container [host:container]"
	echo "   --config (filename) Direct configuration file specification (default: config.zed)"
}

#
# Alias new versions hack
#
if [ -f "/usr/bin/docker.io" ]; then
 export DOCKER_CMD="docker.io"
else
 export DOCKER_CMD="docker"
fi


#
# Expects to always run at home
#
export ZED_TARGET_DIR=$( pwd )
ZED_DIR=$( dirname "${BASH_SOURCE[0]}" )
#echo "ZED_DIR=$ZED_DIR"
if [ -d "$ZED_DIR/zed" ]; then
 ZED_DIR="$ZED_DIR/zed"
fi
export ZED_DIR

#
# Directory specifications
#
export CURDIR=$ZED_TARGET_DIR/
export SCRIPTS="${ZED_DIR}/.zed"
export ZED_CONFIG=${CURDIR}config.zed
export ZED_LOCAL_CONFIG=${CURDIR}local.zed
export ZED_CONTROL="nsenter"

#echo "SCRIPTS=$SCRIPTS"
#echo "Using $ZED_DIR/.zed as root for ZED scripts..."

#
# Parameters
#
while test $# -gt 0; do
	case "$1" in
		-p)
			shift
			if test $# -gt 0; then
				echo "Setting $1"
				ADD_PORTS="${ADD_PORTS} -p $1"
			else
				echo "ERROR No port specified"
				usage
				exit 1
			fi
			shift
			;;
		--port*)
			DATA=`echo $1 | sed -e 's/^[^=]*=//g'`
			ADD_PORTS="$ADD_PORTS -p $DATA"
			shift
			;;
		-v)
			shift
			if test $# -gt 0; then
				echo "Setting $1"
				ADD_VOLUMES="${ADD_VOLUMES} -v $1"
			else
				echo "ERROR: No port specified"
				usage
				exit 1
			fi
			shift
			;;
		--vol*)
			DATA=`echo $1 | sed -e 's/^[^=]*=//g'`
			ADD_VOLUMES="$ADD_VOLUMES -v $DATA"
			shift
			;;
		-e)
			shift
			if test $# -gt 0; then
				echo "Setting $1"
				ADD_ENV_VARS="${ADD_ENV_VARS} -e $1"
			else
				echo "ERROR: No var specified"
				usage
				exit 1
			fi
			shift
			;;
		--env*)
			DATA=`echo $1 | sed -e 's/^[^=]*=//g'`
			ADD_ENV_VARS="$ADD_ENV_VARS -e $DATA"
			shift
			;;
		--config)
			shift
			ZED_CONFIG=$1
			#echo "Using config: $ZED_CONFIG"
			shift
			;;
		-c)
			shift
			ZED_CONTROL=$1
			echo "Using control: $ZED_CONTROL"
			shift
			;;
		*)
			break
			;;
	esac
done

#
# Includes
#
if [ -f "$ZED_LOCAL_CONFIG" ]; then
#	echo "Using local config $ZED_LOCAL_CONFIG"
	source "$ZED_LOCAL_CONFIG"
else 
	if [ -f "$ZED_CONFIG" ]; then
#		echo "Using config $ZED_CONFIG..."
		source "$ZED_CONFIG"
	fi
fi

PORTS="$PORTS $ADD_PORTS"
VOLUMES="$VOLUMES $ADD_VOLUMES"
ENV_VARS="$ENV_VARS $ADD_ENV_VARS"

#
# Fully qualified name:
# e.g. hostname.domain:port/repository:tag
#
export DOCKER_NAME=$([ "$REGISTRY" == "" ] && echo "" || echo "$REGISTRY/" )${REPOSITORY}$([ "$TAG" == "" ] && echo "" || echo ":$TAG" )

#
# Friendly name:
# e.g. my-cool-server-3.0
#
export CONTAINER_NAME="$REPOSITORY-$TAG"

#
# Compiled launch parameters:
# e.g. -p 80:80 -v /var/www -e APP_ENV=prod
#
export CONTAINER_ARGS="$ENV_VARS $PORTS $VOLUMES"

export CONTAINER_SSH="$SSH_PORT"


#
# CLI User Interface
#
while test $# -gt 0; do
	case "$1" in
		-h|--help)
			signature
			usage
			exit 0
			;;
		-i|--info)
			signature
			echo "ZED_DIR:        $ZED_DIR"
			echo "ZED_CONFIG:     $ZED_CONFIG"
			echo "REGISTRY:       $REGISTRY"
			echo "REPOSITORY:     $REPOSITORY"
			echo "TAG:            $TAG"
			echo "DOCKER_NAME:    $DOCKER_NAME"
			echo "CONTAINER_NAME: $CONTAINER_NAME"
			echo "CONTAINER_ARGS: $CONTAINER_ARGS"
			exit 0
			;;
		-a|--actions)
			signature
			cd $SCRIPTS/
			echo "Available actions:"
			for ACTION_FILE in *
			do
				echo " * ${ACTION_FILE/$SCRIPTS\//}"
			done
			cd $CURDIR
			shift
			;;
                *)
			if [[ $CONTAINER_NAME = "-" ]]; then
				echo "ERROR: Invalid configuration!"
				usage
				exit 1
			fi
			if [[ -f "$SCRIPTS/$1" ]]; then
				ACTION="$SCRIPTS/$1"
#				echo "ACTION: $ACTION"
				shift
			fi
                        break
                        ;;
	esac
done

if [ "$ACTION" != "" ]; then
	/bin/bash "$ACTION" $*
	exit 0
else
	usage
	exit 0
fi

# echo $CONTAINER_ARGS
